# CC-Admin 项目开发规范与约定

## ⚠️ 重要：包管理器配置
**强制使用 pnpm 作为包管理器！**
- 项目配置: `"packageManager": "pnpm@10.12.4"`
- Node.js版本要求: `>=24.3.0`
- pnpm版本要求: `>=8.0.0`
- 运行命令: `pnpm dev` / `pnpm build` / `pnpm install`
- **严禁使用 npm 或 yarn 命令**
- AI助手必须使用 pnpm 命令，不得使用 npm 命令
- 配置位置:
  - `.cursor/settings.json`: `"npm.packageManager": "pnpm"`
  - `.vscode/settings.json`: `"npm.packageManager": "pnpm"`
  - `package.json`: `"packageManager": "pnpm@10.12.4"`

## 🏗️ 技术栈
- **前端框架**: Vue 3.5+ (Composition API)
- **语言**: TypeScript 5+ (严格模式)
- **构建工具**: Vite 7+
- **状态管理**: Pinia + pinia-plugin-persistedstate
- **路由**: Vue Router 4+
- **HTTP客户端**: Alova
- **样式方案**: UnoCSS (原子化CSS + Tailwind兼容)
- **代码规范**: ESLint 9+ + Prettier + TypeScript ESLint
- **提交规范**: Commitizen + Commitlint (Conventional Commits)
- **包管理**: pnpm 10.12.4

## 📁 统一目录结构
项目采用 `index.ts + modules/` 模式实现自动化模块导入：
```
src/
├── api/
│   ├── index.ts           # 自动导入 modules/ 下的所有API模块
│   └── modules/           # API模块目录
├── stores/
│   ├── index.ts           # 自动导入 modules/ 下的所有Store模块
│   ├── modules/           # Store模块目录
│   └── types/             # Store类型定义
├── router/
│   ├── index.ts           # 自动导入 modules/ 下的所有路由模块
│   ├── modules/           # 路由模块目录
│   ├── types.ts           # 路由类型定义
│   └── utils.ts           # 路由工具函数
├── hooks/
│   └── index.ts           # 自动导入 hooks 模块
├── common/
│   ├── index.ts           # 自动导入公共模块
│   └── modules/           # 公共模块目录
├── layouts/               # 布局组件
├── views/                 # 页面组件
└── utils/                 # 工具函数
```

## 🎨 样式系统 (UnoCSS)
- **原子化CSS**: 使用UnoCSS，兼容Tailwind语法
- **主题系统**: 支持深色/浅色模式 + 动态主题颜色
- **图标系统**: @iconify/json 图标集合
- **预设配置**:
  - `@unocss/preset-uno`: 基础样式
  - `@unocss/preset-attributify`: 属性化模式
  - `@unocss/preset-icons`: 图标预设
  - `@unocss/preset-typography`: 排版预设
- **配置文件**: `uno.config.ts`
- **CSS变量**: 动态主题颜色绑定到CSS变量系统

## 📝 命名约定
### 文件命名
- **Vue页面**: kebab-case (`user-list.vue`)
- **Vue组件**: PascalCase (`UserCard.vue`)
- **TypeScript文件**: camelCase (`userService.ts`)
- **目录**: kebab-case (`user-management/`)
- **配置文件**: kebab-case 或 点分隔 (`uno.config.ts`, `.prettierrc.json`)

### 代码命名
- **变量/函数**: camelCase (`getUserList`)
- **常量**: SCREAMING_SNAKE_CASE (`MAX_RETRY_COUNT`)
- **接口/类型**: PascalCase (`UserInfo`, `ApiResponse`)
- **组件名**: 多词组合 PascalCase (`UserCard`, `DataTable`)
- **事件处理**: handle前缀 (`handleSubmit`, `handleClick`)
- **Composable**: use前缀 (`useUserStore`, `useTheme`)

## 🧩 Vue 3 开发规范
### Composition API
- **优先使用** Composition API 而非 Options API
- **script setup** 语法糖优先
- **响应式**: 使用 `ref`、`reactive`、`computed`、`watch`
- **生命周期**: 使用 `onMounted`、`onUnmounted` 等组合式生命周期

### 组件设计
- **单文件组件**: `.vue` 文件包含 template、script、style
- **Props类型**: 必须定义 TypeScript 类型
- **事件定义**: 使用 `defineEmits` 定义事件类型
- **插槽使用**: 合理使用具名插槽和作用域插槽
- **组件通信**: Props down, Events up 原则

### TypeScript 集成
- **严格模式**: 启用 `strict: true`
- **类型导入**: 使用 `import type` 导入纯类型
- **接口定义**: 业务数据类型必须定义接口
- **泛型使用**: 合理使用泛型提高代码复用性

## 🔧 开发工具配置
### ESLint + Prettier
- **ESLint**: 代码质量检查，使用 `@eslint/js` 和 `typescript-eslint`
- **Prettier**: 代码格式化，统一代码风格
- **Vue规则**: 使用 `eslint-plugin-vue` 检查Vue组件
- **保存时**: 自动修复ESLint错误和格式化代码
- **Git Hooks**: 提交前自动检查代码质量

### VS Code / Cursor 配置
- **扩展推荐**: Volar, ESLint, Prettier, UnoCSS
- **智能提示**: TypeScript、Vue、UnoCSS类名提示
- **文件嵌套**: 配置文件嵌套显示，保持目录整洁
- **格式化**: 保存时自动格式化，统一团队代码风格

## 🚀 常用开发命令
```bash
# 开发服务器
pnpm dev

# 构建项目
pnpm build

# 构建分析
pnpm build:analyze

# 代码检查
pnpm lint              # ESLint检查和修复
pnpm type-check        # TypeScript类型检查
pnpm naming-check      # 命名规范检查
pnpm code-check        # 综合代码检查

# 代码格式化
pnpm format            # Prettier格式化
pnpm code-fix          # ESLint修复 + 格式化

# Git提交
pnpm commit            # 使用Commitizen规范提交
```

## 🎯 开发最佳实践
### 性能优化
- **按需导入**: 组件、工具函数按需导入
- **代码分割**: 路由级别的代码分割
- **图片优化**: 使用合适格式和尺寸的图片
- **Bundle分析**: 使用 `pnpm build:analyze` 分析打包结果

### 可维护性
- **模块化设计**: 功能模块独立，低耦合高内聚
- **类型安全**: 充分利用TypeScript类型系统
- **错误处理**: 合理的错误边界和异常处理
- **文档注释**: 关键函数和复杂逻辑添加注释

### 团队协作
- **代码审查**: 提交前代码自检，PR时团队审查
- **提交规范**: 使用Conventional Commits格式
- **分支管理**: 功能分支开发，合并前测试
- **依赖管理**: 及时更新依赖，避免安全漏洞

## 🔒 强制执行规则
1. **包管理器**: 必须使用pnpm，禁止npm/yarn
2. **代码规范**: Git提交前强制检查ESLint、TypeScript、命名规范
3. **类型安全**: 所有公共API和组件Props必须定义类型
4. **目录结构**: 新增模块必须遵循既定的目录结构
5. **提交信息**: 必须使用Commitizen生成规范的提交信息
