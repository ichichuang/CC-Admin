# CC-Admin 项目文档规范 v2.0

## 📁 文档目录结构原则

### 基础结构

```
项目根目录/
├── README.md          # 项目入口文档（必需）
└── docs/              # 文档目录（必需）
    ├── ...            # 根据项目需要灵活组织
    └── CHANGELOG.md   # 版本记录（推荐）
```

### 目录分类建议

**按功能维度分类**（适合功能丰富的项目）

```
docs/
├── user-system/       # 用户系统
├── content-mgmt/      # 内容管理
├── data-analysis/     # 数据分析
└── system-config/     # 系统配置
```

**按使用阶段分类**（适合工具类项目）

```
docs/
├── getting-started/   # 快速开始
├── advanced/          # 高级用法
├── troubleshooting/   # 问题排查
└── reference/         # 参考资料
```

**按用户角色分类**（适合多角色项目）

```
docs/
├── user-guide/        # 用户指南
├── admin-guide/       # 管理员指南
├── developer-guide/   # 开发者指南
└── api-reference/     # API参考
```

**按技术层次分类**（适合技术类项目）

```
docs/
├── frontend/          # 前端相关
├── backend/           # 后端相关
├── database/          # 数据库相关
└── deployment/        # 部署相关
```

### 目录命名规范

- **使用英文**：便于版本控制和跨平台
- **小写字母**：避免大小写敏感问题
- **连字符分隔**：`user-management` 而非 `userManagement`
- **语义清晰**：见名知意，避免缩写
- **层级合理**：不超过3层嵌套

### 灵活组织示例

**小型项目**（文档较少）

```
docs/
├── README.md          # 使用说明
├── installation.md    # 安装指南
├── configuration.md   # 配置说明
└── CHANGELOG.md      # 更新日志
```

**中型项目**（功能模块化）

```
docs/
├── guide/
│   ├── installation.md
│   └── quick-start.md
├── modules/
│   ├── auth.md
│   └── dashboard.md
└── deployment/
    └── production.md
```

**大型项目**（复杂功能体系）

```
docs/
├── user/              # 用户文档
├── admin/             # 管理文档
├── developer/         # 开发文档
├── api/               # 接口文档
├── deployment/        # 部署文档
└── internal/          # 内部文档
```

## 📝 文档编写模板

### 根目录 README.md 模板

````markdown
# 项目名称

> 项目简介（一句话说明项目用途）

## 🚀 快速开始

### 安装依赖

```bash
pnpm install
```
````

### 启动项目

```bash
pnpm dev          # 启动开发服务器
pnpm build        # 构建生产版本
pnpm preview      # 预览生产版本
```

### 常用命令

```bash
pnpm lint         # 代码检查
pnpm format       # 代码格式化
pnpm type-check   # 类型检查
pnpm check        # 全面检查
```

## 📚 文档导航

- [快速开始](./docs/guide/getting-started.md) - 详细安装和配置指南
- [开发指南](./docs/development/) - 开发环境和编码规范
- [功能介绍](./docs/features/) - 各功能模块使用说明
- [API文档](./docs/api/) - 接口文档和调用示例
- [部署指南](./docs/deployment/) - 生产环境部署
- [版本记录](./docs/changelog/CHANGELOG.md) - 更新日志

## 🛠 技术栈

Vue 3.5+ • TypeScript 5+ • Vite 7+ • UnoCSS • Pinia

## 📄 开源协议

[MIT License](./LICENSE)

````

### 功能模块文档模板

```markdown
# 功能名称

## 🎯 快速使用

### 基本用法
- 第一步：如何开始使用
- 第二步：基础配置
- 第三步：实现功能

### 常见操作
- 添加数据：`具体命令或操作步骤`
- 删除数据：`具体命令或操作步骤`
- 修改配置：`具体命令或操作步骤`

### 配置选项
| 配置项 | 默认值 | 说明 | 示例 |
|--------|--------|------|------|
| option1 | `default` | 配置说明 | `example` |
| option2 | `default` | 配置说明 | `example` |

## 📋 可用操作

### 用户操作
- **创建**：如何创建新项目
- **编辑**：如何编辑现有项目
- **删除**：如何删除项目
- **查询**：如何搜索和筛选

### 管理员操作
- **权限设置**：如何配置权限
- **批量操作**：如何批量处理数据

## ⚙️ 高级配置

### 自定义配置
- 配置文件位置：`config/feature.config.ts`
- 环境变量设置：`FEATURE_CONFIG=value`

### 集成其他模块
- 与用户管理模块集成
- 与权限系统集成

## ❓ 常见问题

**Q: 如何解决XXX问题？**
A: 解决方案步骤...

**Q: 为什么会出现YYY错误？**
A: 原因和解决方法...

## 📖 功能说明

### 设计目标
- 解决什么问题
- 提供什么价值

### 核心特性
- 特性1：具体描述
- 特性2：具体描述

### 技术实现
- 使用的技术栈
- 架构设计思路

## 🔧 故障排除

### 常见错误
1. **错误现象**：具体描述
   - 原因：错误原因
   - 解决：解决步骤

2. **性能问题**：具体描述
   - 排查：排查方法
   - 优化：优化建议
````

### API 文档模板

````markdown
# API模块名称

## 🔌 接口清单

### 认证相关

- `POST /api/login` - 用户登录
- `POST /api/logout` - 用户登出
- `GET /api/profile` - 获取用户信息

### 数据操作

- `GET /api/users` - 获取用户列表
- `POST /api/users` - 创建用户
- `PUT /api/users/:id` - 更新用户
- `DELETE /api/users/:id` - 删除用户

## 📡 接口调用

### 用户登录

```bash
# 请求示例
curl -X POST /api/login \
  -H "Content-Type: application/json" \
  -d '{"username": "admin", "password": "123456"}'

# 响应示例
{
  "code": 200,
  "data": {
    "token": "jwt-token-string",
    "user": {...}
  }
}
```
````

### 获取用户列表

```bash
# 请求示例
curl -X GET /api/users?page=1&size=10 \
  -H "Authorization: Bearer jwt-token"

# 响应示例
{
  "code": 200,
  "data": {
    "list": [...],
    "total": 100
  }
}
```

## 🔑 认证方式

### Token 获取

1. 调用登录接口获取 token
2. 在请求头中添加：`Authorization: Bearer <token>`

### 权限验证

- 需要登录的接口会验证 token
- 需要特定权限的接口会检查用户角色

## 📊 状态码说明

| 状态码 | 说明       | 处理建议     |
| ------ | ---------- | ------------ |
| 200    | 成功       | 正常处理数据 |
| 401    | 未授权     | 重新登录     |
| 403    | 权限不足   | 检查用户权限 |
| 404    | 资源不存在 | 检查请求路径 |
| 500    | 服务器错误 | 联系技术支持 |

## 🛠 接口测试

### 使用 Postman

1. 导入接口集合文件：`api/postman/collection.json`
2. 设置环境变量：`{{baseUrl}}`, `{{token}}`
3. 按顺序测试接口

### 使用 curl

```bash
# 设置环境变量
export API_URL="http://localhost:3000"
export TOKEN="your-jwt-token"

# 测试登录
curl -X POST $API_URL/api/login -d '{"username":"admin","password":"123456"}'
```

## 📋 数据格式

### 通用响应格式

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {},
  "timestamp": 1642694400000
}
```

### 分页数据格式

```json
{
  "code": 200,
  "data": {
    "list": [],
    "pagination": {
      "page": 1,
      "size": 10,
      "total": 100,
      "pages": 10
    }
  }
}
```

## 🔍 技术实现

### 接口设计原则

- RESTful API 设计
- 统一错误处理
- 请求参数验证
- 响应数据格式化

### 安全措施

- JWT Token 认证
- 接口访问频率限制
- 敏感数据加密传输
- SQL 注入防护

````

## 🎨 文档编写规范

### 内容组织原则

1. **使用优先** - 每个文档开头必须是"如何使用"
2. **步骤清晰** - 操作步骤用数字或项目符号列出
3. **实例具体** - 提供真实可用的命令和配置
4. **问题导向** - 常见问题和解决方案放在显眼位置

### 语言风格要求

- **简洁明了**：避免长篇大论，直击要点
- **操作导向**：多用动词，少用形容词
- **用户视角**：站在使用者角度描述功能
- **统一术语**：技术名词保持一致

### 格式规范

#### 标题层级
- `#` 文档标题（唯一）
- `##` 主要章节（快速使用、配置选项等）
- `###` 具体功能（基本用法、高级配置等）
- `####` 详细说明（仅在必要时使用）

#### 强调标记
- **加粗**：重要操作、关键配置项
- `代码`：命令、文件名、配置值
- > 引用：重要提示、注意事项

#### 表格使用
- 配置选项表：参数、默认值、说明、示例
- API参数表：字段、类型、必填、说明
- 状态码表：代码、含义、处理建议

## 🏷️ 版本管理规范

### 文档版本号
- 跟随项目主版本号
- 重大更新时更新文档版本
- 在文档头部标注版本信息

### 变更记录
```markdown
## 版本历史

### v2.0.0 (2024-01-15)
- 🆕 新增模块化文档结构
- 💄 优化文档布局和导航
- 📖 完善API文档模板

### v1.2.0 (2023-12-01)
- 🆕 添加部署指南
- 🐞 修复文档链接错误
````

## 🔧 文档维护流程

### 创建新文档

1. 确定文档分类和目录位置
2. 复制对应模板文件
3. 按模板结构填写内容
4. 更新导航链接

### 更新现有文档

1. 功能更新时同步更新文档
2. 保持"快速使用"部分的准确性
3. 及时更新版本号和日期
4. 检查所有链接的有效性

### 质量检查清单

- [ ] 开头有"快速使用"章节
- [ ] 命令和配置可以直接复制使用
- [ ] 所有操作步骤都经过验证
- [ ] 文档结构符合模板要求
- [ ] 内容表达简洁明了
- [ ] 链接和引用正确有效

## 🎯 文档评估标准

### 用户友好度

- 新用户能否在5分钟内上手？
- 操作步骤是否清晰易懂？
- 常见问题是否有解决方案？

### 内容完整度

- 核心功能是否都有说明？
- API接口是否有调用示例？
- 配置选项是否说明清楚？

### 维护及时性

- 功能更新后是否同步更新文档？
- 错误信息是否及时修正？
- 用户反馈是否得到处理？

## 📚 推荐工具

### 文档编写

- **Typora** - Markdown编辑器
- **Obsidian** - 文档管理和链接
- **Notion** - 协作文档平台

### 图表制作

- **Draw.io** - 流程图和架构图
- **PlantUML** - 文本生成UML图
- **Excalidraw** - 手绘风格图表

### 文档检查

- **Vale** - 文档风格检查
- **Alex** - 包容性语言检查
- **Grammarly** - 语法和拼写检查

---

_本规范适用于 CC-Admin 项目的所有文档，旨在提供清晰、实用、易维护的文档体系。_
