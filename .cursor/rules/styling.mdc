# CC-Admin UnoCSS 样式规范

## 🎨 样式方案概述

CC-Admin 使用 **UnoCSS** 作为样式解决方案，提供原子化CSS + Tailwind兼容语法，实现高性能、可维护的样式系统。

### 核心特性

- **原子化CSS**: 小粒度、可复用的工具类
- **Tailwind兼容**: 使用熟悉的Tailwind语法
- **按需生成**: 只生成实际使用的样式
- **TypeScript支持**: 完整的类型提示和检查
- **主题系统**: 动态主题切换和CSS变量集成

## 🏗️ UnoCSS 配置架构

### 预设配置

```typescript
// uno.config.ts
export default defineConfig({
  presets: [
    presetUno(), // 基础工具类 (Tailwind兼容)
    presetAttributify(), // 属性化模式
    presetIcons(), // 图标系统 (@iconify/json)
    presetTypography(), // 排版预设
  ],

  // 变换器
  transformers: [
    transformerDirectives(), // @apply 指令支持
    transformerVariantGroup(), // 变体组合简化
  ],

  // 自定义规则
  rules: [
    // 自定义工具类规则
  ],

  // 快捷方式
  shortcuts: {
    // 常用组合的简化写法
  },
})
```

### 主题Token集成

```typescript
// uno.config.ts theme 配置
theme: {
  colors: {
    // 与 Pinia stores/color.ts 保持同步
    primary: 'var(--cc-primary)',
    success: 'var(--cc-success)',
    warning: 'var(--cc-warning)',
    error: 'var(--cc-error)',
    info: 'var(--cc-info)',

    // 深色主题适配
    dark: {
      bg: 'var(--cc-dark-bg)',
      surface: 'var(--cc-dark-surface)',
      border: 'var(--cc-dark-border)'
    }
  },

  // 尺寸系统（与 stores/size.ts 同步）
  spacing: {
    xs: 'var(--cc-spacing-xs)',
    sm: 'var(--cc-spacing-sm)',
    md: 'var(--cc-spacing-md)',
    lg: 'var(--cc-spacing-lg)',
    xl: 'var(--cc-spacing-xl)'
  }
}
```

## 📝 样式编写规范

### 基础工具类使用

```vue
<template>
  <!-- ✅ 正确：使用原子化类名 -->
  <div class="flex items-center justify-between p-4 bg-white rounded-lg shadow-sm">
    <h1 class="text-xl font-semibold text-gray-900">标题</h1>
    <button class="px-4 py-2 bg-primary text-white rounded hover:bg-primary/80 transition-colors">
      操作按钮
    </button>
  </div>

  <!-- ✅ 正确：响应式设计 -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    <div class="p-4 bg-white rounded-lg">卡片内容</div>
  </div>

  <!-- ✅ 正确：状态变体 -->
  <button
    class="btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
    :disabled="isLoading"
  >
    <span
      v-if="isLoading"
      class="inline-block animate-spin mr-2"
      >⏳</span
    >
    提交
  </button>
</template>
```

### 变体组合简化

```vue
<template>
  <!-- ✅ 正确：使用变体组合 -->
  <div class="hover:(bg-gray-100 shadow-md) focus:(outline-none ring-2 ring-primary)">
    可交互元素
  </div>

  <!-- ✅ 正确：深色模式变体 -->
  <div class="bg-white dark:bg-gray-800 text-gray-900 dark:text-white">自适应主题的内容</div>

  <!-- ✅ 正确：响应式变体组合 -->
  <div class="text-(sm gray-600) md:text-(base gray-900) lg:text-(lg gray-800)">响应式文本</div>
</template>
```

### 属性化模式

```vue
<template>
  <!-- ✅ 正确：使用属性化语法（复杂样式时推荐） -->
  <div
    flex="~ col items-center justify-center"
    p="x-6 y-4"
    bg="white dark:gray-800"
    border="~ rounded-lg gray-200 dark:gray-700"
    text="center lg gray-900 dark:white"
  >
    属性化样式内容
  </div>

  <!-- ✅ 正确：动态属性化 -->
  <div
    :class="[
      'transition-all duration-300',
      isActive ? 'bg-primary text-white' : 'bg-gray-100 text-gray-700',
    ]"
    :bg="isActive ? 'primary' : 'gray-100'"
    :text="isActive ? 'white' : 'gray-700'"
  >
    动态样式
  </div>
</template>
```

## 🎭 主题系统集成

### CSS变量绑定

```vue
<template>
  <!-- ✅ 正确：使用主题变量 -->
  <div class="bg-[var(--cc-primary)] text-[var(--cc-primary-contrast)]">主题色背景</div>

  <!-- ✅ 正确：动态主题切换 -->
  <div
    class="transition-colors duration-300"
    :style="{
      backgroundColor: 'var(--cc-surface)',
      color: 'var(--cc-text-primary)',
      borderColor: 'var(--cc-border)',
    }"
  >
    动态主题内容
  </div>
</template>

<script setup lang="ts">
import { useColorStore } from '@/stores/color'

const colorStore = useColorStore()

// ✅ 正确：响应主题变化
watch(
  () => colorStore.currentTheme,
  newTheme => {
    // 主题切换时的额外逻辑
  },
  { immediate: true }
)
</script>
```

### 深色模式支持

```vue
<template>
  <!-- ✅ 正确：深色模式适配 -->
  <div class="bg-white dark:bg-gray-900">
    <header class="border-b border-gray-200 dark:border-gray-700">
      <h1 class="text-gray-900 dark:text-white">标题</h1>
    </header>

    <main class="p-6">
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
        <p class="text-gray-600 dark:text-gray-300">内容文字</p>
      </div>
    </main>
  </div>

  <!-- ✅ 正确：图标深色模式 -->
  <button class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
    <i class="i-tabler-settings w-5 h-5"></i>
  </button>
</template>
```

## 📱 响应式设计

### 断点系统

```vue
<template>
  <!-- ✅ 正确：移动优先的响应式设计 -->
  <div
    class="
    w-full
    sm:w-1/2
    md:w-1/3
    lg:w-1/4
    xl:w-1/5
    p-2
    sm:p-3
    md:p-4
    lg:p-6
  "
  >
    响应式卡片
  </div>

  <!-- ✅ 正确：复杂响应式布局 -->
  <div
    class="
    flex flex-col
    sm:flex-row
    gap-4
    sm:gap-6
    lg:gap-8
  "
  >
    <aside class="w-full sm:w-64 lg:w-80">侧边栏</aside>
    <main class="flex-1 min-w-0">主内容</main>
  </div>
</template>
```

### 移动端优化

```vue
<template>
  <!-- ✅ 正确：触摸友好的交互 -->
  <button
    class="
    min-h-[44px] min-w-[44px]  /* 最小触摸区域 */
    px-4 py-2
    text-base sm:text-sm       /* 移动端较大字体 */
    rounded-lg
    active:scale-95           /* 触摸反馈 */
    transition-transform
  "
  >
    移动端按钮
  </button>

  <!-- ✅ 正确：移动端导航 -->
  <nav
    class="
    fixed bottom-0 left-0 right-0  /* 移动端底部导航 */
    sm:static sm:bottom-auto       /* 桌面端静态定位 */
    bg-white dark:bg-gray-900
    border-t border-gray-200 dark:border-gray-700
    sm:border-t-0 sm:border-r
    z-50
  "
  >
    <!-- 导航内容 -->
  </nav>
</template>
```

## 🎨 组件样式模式

### 基础组件样式

```vue
<!-- UserCard.vue -->
<template>
  <div class="user-card">
    <!-- 内容 -->
  </div>
</template>

<style>
/* ✅ 正确：使用 @apply 组合工具类 */
.user-card {
  @apply bg-white dark:bg-gray-800
    rounded-lg shadow-sm
    p-6 border border-gray-200 dark:border-gray-700
    hover:shadow-md transition-shadow duration-200;
}

/* ✅ 正确：组件内部样式 */
.user-card-avatar {
  @apply w-12 h-12 rounded-full object-cover;
}

.user-card-title {
  @apply text-lg font-semibold text-gray-900 dark:text-white mb-2;
}

.user-card-description {
  @apply text-sm text-gray-600 dark:text-gray-300 line-clamp-2;
}
</style>
```

### 复杂组件样式

```vue
<!-- DataTable.vue -->
<template>
  <div class="data-table-container">
    <table class="data-table">
      <thead class="data-table-header">
        <tr>
          <th class="data-table-header-cell">列标题</th>
        </tr>
      </thead>
      <tbody class="data-table-body">
        <tr class="data-table-row">
          <td class="data-table-cell">单元格</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<style>
/* ✅ 正确：表格样式系统 */
.data-table-container {
  @apply overflow-x-auto bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700;
}

.data-table {
  @apply w-full border-collapse;
}

.data-table-header {
  @apply bg-gray-50 dark:bg-gray-700;
}

.data-table-header-cell {
  @apply px-6 py-3 text-left text-xs font-medium
    text-gray-500 dark:text-gray-300 uppercase tracking-wider
    border-b border-gray-200 dark:border-gray-600;
}

.data-table-row {
  @apply border-b border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700/50;
}

.data-table-cell {
  @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100;
}
</style>
```

## 🔧 自定义工具类

### 快捷方式定义

```typescript
// uno.config.ts shortcuts
shortcuts: {
  // 布局快捷方式
  'flex-center': 'flex items-center justify-center',
  'flex-between': 'flex items-center justify-between',
  'flex-col-center': 'flex flex-col items-center justify-center',

  // 按钮样式
  'btn-base': 'inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2',
  'btn-primary': 'btn-base bg-primary text-white hover:bg-primary/90 focus:ring-primary',
  'btn-secondary': 'btn-base bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',

  // 卡片样式
  'card-base': 'bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700',
  'card-hover': 'card-base hover:shadow-md transition-shadow duration-200',

  // 输入框样式
  'input-base': 'w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary bg-white dark:bg-gray-700 text-gray-900 dark:text-white',

  // 文本样式
  'text-title': 'text-xl font-semibold text-gray-900 dark:text-white',
  'text-subtitle': 'text-lg font-medium text-gray-700 dark:text-gray-300',
  'text-body': 'text-base text-gray-600 dark:text-gray-400',
  'text-caption': 'text-sm text-gray-500 dark:text-gray-500'
}
```

### 自定义规则

```typescript
// uno.config.ts rules
rules: [
  // 安全区域适配
  ['pt-safe', { 'padding-top': 'env(safe-area-inset-top)' }],
  ['pb-safe', { 'padding-bottom': 'env(safe-area-inset-bottom)' }],
  ['pl-safe', { 'padding-left': 'env(safe-area-inset-left)' }],
  ['pr-safe', { 'padding-right': 'env(safe-area-inset-right)' }],

  // 文本截断
  [
    /^line-clamp-(\d+)$/,
    ([, num]) => ({
      overflow: 'hidden',
      display: '-webkit-box',
      '-webkit-box-orient': 'vertical',
      '-webkit-line-clamp': num,
    }),
  ],

  // 滚动条样式
  [
    'scrollbar-thin',
    {
      'scrollbar-width': 'thin',
      'scrollbar-color': 'var(--cc-border) transparent',
    },
  ],
  [
    'scrollbar-none',
    {
      'scrollbar-width': 'none',
      '-ms-overflow-style': 'none',
      '&::-webkit-scrollbar': { display: 'none' },
    },
  ],
]
```

## 🎯 图标系统

### Iconify 图标使用

```vue
<template>
  <!-- ✅ 正确：使用图标工具类 -->
  <button class="flex items-center gap-2">
    <i class="i-tabler-plus w-4 h-4"></i>
    添加用户
  </button>

  <!-- ✅ 正确：图标尺寸变体 -->
  <div class="flex items-center gap-3">
    <i class="i-tabler-user w-3 h-3"></i>
    <!-- 小尺寸 -->
    <i class="i-tabler-user w-4 h-4"></i>
    <!-- 默认尺寸 -->
    <i class="i-tabler-user w-5 h-5"></i>
    <!-- 中等尺寸 -->
    <i class="i-tabler-user w-6 h-6"></i>
    <!-- 大尺寸 -->
  </div>

  <!-- ✅ 正确：图标颜色和状态 -->
  <i class="i-tabler-heart w-5 h-5 text-red-500 hover:text-red-600"></i>
  <i class="i-tabler-star w-5 h-5 text-yellow-400 hover:text-yellow-500"></i>
</template>
```

## ⚠️ 样式规范约束

### 避免的写法

```vue
<template>
  <!-- ❌ 错误：内联样式（除非必要的动态值） -->
  <div style="color: red; font-size: 16px;">错误示例</div>

  <!-- ❌ 错误：硬编码颜色（应使用主题变量） -->
  <div class="bg-[#3b82f6]">硬编码颜色</div>

  <!-- ❌ 错误：非语义化类名 -->
  <div class="w-[123px] h-[456px] ml-[37px]">任意值滥用</div>

  <!-- ❌ 错误：重复的复杂样式组合 -->
  <div
    class="flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
  >
    重复样式1
  </div>
  <div
    class="flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
  >
    重复样式2
  </div>
</template>
```

### 推荐的写法

```vue
<template>
  <!-- ✅ 正确：使用CSS变量 -->
  <div class="text-[var(--cc-primary)]">主题色文字</div>

  <!-- ✅ 正确：使用快捷方式 -->
  <button class="btn-primary">操作按钮1</button>
  <button class="btn-primary">操作按钮2</button>

  <!-- ✅ 正确：合理的任意值使用 -->
  <div class="w-[calc(100%-2rem)] max-w-[1200px]">响应式容器</div>
</template>
```

## 📈 性能优化

### 样式优化策略

```typescript
// ✅ 正确：按需生成配置
export default defineConfig({
  // 只扫描实际使用的文件
  content: ['./src/**/*.{vue,js,ts,jsx,tsx}', './index.html'],

  // 排除不需要的预设功能
  presets: [
    presetUno({
      // 只启用需要的功能
    }),
  ],

  // 生产环境优化
  minify: process.env.NODE_ENV === 'production',
})
```

### 运行时性能

```vue
<script setup lang="ts">
// ✅ 正确：样式计算缓存
const buttonClass = computed(() => [
  'btn-base',
  props.variant === 'primary' ? 'btn-primary' : 'btn-secondary',
  props.size === 'large' ? 'text-lg px-6 py-3' : 'text-sm px-4 py-2',
  props.disabled && 'opacity-50 cursor-not-allowed',
])
</script>

<template>
  <!-- ✅ 正确：使用计算属性避免重复计算 -->
  <button :class="buttonClass">
    {{ props.label }}
  </button>
</template>
```

遵循这些UnoCSS样式规范，确保CC-Admin项目具有一致的视觉效果、优秀的性能表现和良好的维护性。

- 确保焦点状态有明显的视觉提示
- 提供足够的色彩对比度
- 不依赖颜色来传达信息
- 支持用户放大页面至 200% 时的正常布局
- 避免使用会导致闪烁的动画
