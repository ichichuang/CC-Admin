# CC-Admin Vue3 国际化规范

CC-Admin 中所有的国际化配置都在 `src/locales` 目录中完成定义，主要分为：类型定义、语言配置和组件使用。

## 🏗️ 国际化架构

### 目录结构

```
src/locales/
├── index.ts               # 国际化配置入口
├── types.ts               # 国际化类型定义
├── modules/               # 按模块组织的语言文件
│   ├── common.ts          # 通用语言配置
│   ├── auth.ts            # 认证模块语言配置
│   ├── user.ts            # 用户模块语言配置
│   ├── dashboard.ts       # 仪表盘模块语言配置
│   └── router.ts          # 路由模块语言配置
└── lang/                  # 按语言组织的完整配置
    ├── zh-CN.ts           # 简体中文
    ├── en-US.ts           # 美式英语
    ├── zh-TW.ts           # 繁体中文
    └── ja-JP.ts           # 日语
```

### 支持的语言

| 语言代码 | 语言名称 | 国旗 | 文字方向 | 状态        |
| -------- | -------- | ---- | -------- | ----------- |
| zh-CN    | 简体中文 | 🇨🇳   | ltr      | ✅ 完整支持 |
| en-US    | English  | 🇺🇸   | ltr      | ✅ 完整支持 |
| zh-TW    | 繁體中文 | 🇹🇼   | ltr      | ✅ 完整支持 |
| ja-JP    | 日本語   | 🇯🇵   | ltr      | ✅ 完整支持 |

## 📝 类型定义

### 主要国际化类型

```typescript
// src/locales/types.ts

// 支持的语言类型
export type SupportedLocale = 'zh-CN' | 'en-US' | 'zh-TW' | 'ja-JP'

// 语言配置接口
export interface LocaleInfo {
  key: SupportedLocale
  name: string
  flag: string
  direction: 'ltr' | 'rtl'
}

// 通用语言配置结构
export interface CommonLocaleMessages {
  // 操作相关
  actions: {
    confirm: string
    cancel: string
    save: string
    delete: string
    edit: string
    add: string
    search: string
    reset: string
    submit: string
    refresh: string
    export: string
    import: string
    close: string
    back: string
    next: string
    previous: string
  }

  // 状态相关
  status: {
    loading: string
    success: string
    error: string
    warning: string
    info: string
    pending: string
    completed: string
    failed: string
    active: string
    inactive: string
  }

  // 表单相关
  form: {
    required: string
    invalid: string
    tooShort: string
    tooLong: string
    invalidEmail: string
    invalidPhone: string
    invalidUrl: string
    passwordMismatch: string
    pleaseSelect: string
    pleaseInput: string
  }

  // 表格相关
  table: {
    noData: string
    total: string
    page: string
    pageSize: string
    itemsPerPage: string
    goToPage: string
    firstPage: string
    lastPage: string
    previousPage: string
    nextPage: string
  }

  // 时间相关
  time: {
    now: string
    today: string
    yesterday: string
    tomorrow: string
    thisWeek: string
    thisMonth: string
    thisYear: string
    format: {
      date: string
      datetime: string
      time: string
    }
  }

  // 系统相关
  system: {
    title: string
    description: string
    version: string
    copyright: string
    loading: string
    networkError: string
    serverError: string
    unauthorized: string
    forbidden: string
    notFound: string
  }
}

// 认证模块语言配置
export interface AuthLocaleMessages {
  login: {
    title: string
    username: string
    password: string
    rememberMe: string
    forgotPassword: string
    loginButton: string
    loginSuccess: string
    loginFailed: string
    invalidCredentials: string
    usernameRequired: string
    passwordRequired: string
  }

  logout: {
    title: string
    confirm: string
    success: string
    failed: string
  }

  register: {
    title: string
    username: string
    password: string
    confirmPassword: string
    email: string
    phone: string
    agreement: string
    registerButton: string
    registerSuccess: string
    registerFailed: string
    userExists: string
    emailExists: string
  }
}

// 用户模块语言配置
export interface UserLocaleMessages {
  profile: {
    title: string
    basicInfo: string
    avatar: string
    username: string
    email: string
    phone: string
    department: string
    role: string
    lastLogin: string
    createdAt: string
    updatedAt: string
    updateSuccess: string
    updateFailed: string
  }

  management: {
    title: string
    userList: string
    addUser: string
    editUser: string
    deleteUser: string
    deleteConfirm: string
    batchDelete: string
    exportUsers: string
    importUsers: string
    userCount: string
    searchUser: string
    filterByRole: string
    filterByStatus: string
  }

  roles: {
    admin: string
    user: string
    guest: string
    moderator: string
    editor: string
    viewer: string
  }

  status: {
    active: string
    inactive: string
    banned: string
    pending: string
    suspended: string
  }
}

// 仪表盘模块语言配置
export interface DashboardLocaleMessages {
  title: string
  welcome: string
  overview: string
  statistics: {
    totalUsers: string
    activeUsers: string
    totalOrders: string
    totalRevenue: string
    growthRate: string
    conversionRate: string
  }
  charts: {
    userGrowth: string
    revenueChart: string
    orderChart: string
    trafficChart: string
    conversionChart: string
  }
  quickActions: {
    title: string
    addUser: string
    viewOrders: string
    generateReport: string
    systemSettings: string
  }
  recentActivities: {
    title: string
    viewAll: string
    noActivities: string
  }
}

// 路由配置模块语言配置
export interface RouterLocaleMessages {
  core: {
    login: string
  }
  dashboard: {
    dashboard: string
  }
  example: {
    example: string
    i18n: string
    unocss: string
  }
  error: {
    notFound: string
    forbidden: string
    serverError: string
  }
}

// 根语言配置接口
export interface LocaleMessages {
  common: CommonLocaleMessages
  auth: AuthLocaleMessages
  user: UserLocaleMessages
  dashboard: DashboardLocaleMessages
  router: RouterLocaleMessages
}

// 语言包加载配置
export interface LocaleConfig {
  messages: Record<SupportedLocale, LocaleMessages>
  fallbackLocale: SupportedLocale
  supportedLocales: LocaleInfo[]
  defaultLocale: SupportedLocale
}
```

## 🌍 语言配置文件

### 模块化语言配置

```typescript
// src/locales/modules/common.ts

/** 中文配置 */
export const commonZhCN: CommonLocaleMessages = {
  actions: {
    confirm: '确认',
    cancel: '取消',
    save: '保存',
    delete: '删除',
    edit: '编辑',
    add: '添加',
    search: '搜索',
    reset: '重置',
    submit: '提交',
    refresh: '刷新',
    export: '导出',
    import: '导入',
    close: '关闭',
    back: '返回',
    next: '下一步',
    previous: '上一步',
  },

  status: {
    loading: '加载中...',
    success: '操作成功',
    error: '操作失败',
    warning: '警告',
    info: '提示',
    pending: '等待中',
    completed: '已完成',
    failed: '失败',
    active: '启用',
    inactive: '禁用',
  },

  form: {
    required: '此字段为必填项',
    invalid: '输入格式不正确',
    tooShort: '输入内容过短',
    tooLong: '输入内容过长',
    invalidEmail: '邮箱格式不正确',
    invalidPhone: '手机号格式不正确',
    invalidUrl: '网址格式不正确',
    passwordMismatch: '两次密码输入不一致',
    pleaseSelect: '请选择',
    pleaseInput: '请输入',
  },

  table: {
    noData: '暂无数据',
    total: '共 {total} 条',
    page: '第 {page} 页',
    pageSize: '每页 {size} 条',
    itemsPerPage: '每页条数',
    goToPage: '跳转到',
    firstPage: '首页',
    lastPage: '尾页',
    previousPage: '上一页',
    nextPage: '下一页',
  },

  time: {
    now: '刚刚',
    today: '今天',
    yesterday: '昨天',
    tomorrow: '明天',
    thisWeek: '本周',
    thisMonth: '本月',
    thisYear: '今年',
    format: {
      date: 'YYYY-MM-DD',
      datetime: 'YYYY-MM-DD HH:mm:ss',
      time: 'HH:mm:ss',
    },
  },

  system: {
    title: 'CC-Admin',
    description: '企业级后台管理系统',
    version: '版本',
    copyright: '版权所有',
    loading: '系统加载中...',
    networkError: '网络连接失败',
    serverError: '服务器错误',
    unauthorized: '未授权访问',
    forbidden: '访问被拒绝',
    notFound: '页面不存在',
  },
}

/** 英文配置 */
export const commonEnUS: CommonLocaleMessages = {
  actions: {
    confirm: 'Confirm',
    cancel: 'Cancel',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    search: 'Search',
    reset: 'Reset',
    submit: 'Submit',
    refresh: 'Refresh',
    export: 'Export',
    import: 'Import',
    close: 'Close',
    back: 'Back',
    next: 'Next',
    previous: 'Previous',
  },

  status: {
    loading: 'Loading...',
    success: 'Success',
    error: 'Error',
    warning: 'Warning',
    info: 'Info',
    pending: 'Pending',
    completed: 'Completed',
    failed: 'Failed',
    active: 'Active',
    inactive: 'Inactive',
  },

  // ... 其他英文配置
}

/** 繁体中文配置 */
export const commonZhTW: CommonLocaleMessages = {
  // ... 繁体中文配置
}

/** 日文配置 */
export const commonJaJP: CommonLocaleMessages = {
  // ... 日文配置
}
```

### 完整语言包

```typescript
// src/locales/lang/zh-CN.ts
import { authZhCN } from '../modules/auth'
import { commonZhCN } from '../modules/common'
import { dashboardZhCN } from '../modules/dashboard'
import { routerZhCN } from '../modules/router'
import { userZhCN } from '../modules/user'
import type { LocaleMessages } from '../types'

export const zhCN: LocaleMessages = {
  common: commonZhCN,
  auth: authZhCN,
  user: userZhCN,
  dashboard: dashboardZhCN,
  router: routerZhCN,
}

// src/locales/lang/en-US.ts
import { authEnUS } from '../modules/auth'
import { commonEnUS } from '../modules/common'
import { dashboardEnUS } from '../modules/dashboard'
import { userEnUS } from '../modules/user'
import { routerEnUS } from '../modules/router'
import type { LocaleMessages } from '../types'

export const enUS: LocaleMessages = {
  common: commonEnUS,
  auth: authEnUS,
  user: userEnUS,
  dashboard: dashboardEnUS,
  router: routerEnUS,
}
```

## ⚙️ Vue3 国际化配置

### Vue I18n 配置

```typescript
// src/locales/index.ts
import type { App } from 'vue'
import { createI18n } from 'vue-i18n'
import { enUS } from './lang/en-US'
import { jaJP } from './lang/ja-JP'
import { zhCN } from './lang/zh-CN'
import { zhTW } from './lang/zh-TW'
import type { LocaleInfo, LocaleMessages, SupportedLocale } from './types'

// 支持的语言列表
export const supportedLocales: LocaleInfo[] = [
  {
    key: 'zh-CN',
    name: '简体中文',
    flag: '🇨🇳',
    direction: 'ltr',
  },
  {
    key: 'en-US',
    name: 'English',
    flag: '🇺🇸',
    direction: 'ltr',
  },
  {
    key: 'zh-TW',
    name: '繁體中文',
    flag: '🇹🇼',
    direction: 'ltr',
  },
  {
    key: 'ja-JP',
    name: '日本語',
    flag: '🇯🇵',
    direction: 'ltr',
  },
]

// 语言包映射
const messages: Record<SupportedLocale, LocaleMessages> = {
  ['zh-CN']: zhCN,
  ['en-US']: enUS,
  ['zh-TW']: zhTW,
  ['ja-JP']: jaJP,
}

// 获取默认语言
function getDefaultLocale(): SupportedLocale {
  // 1. 从localStorage获取用户设置
  const savedLocale = localStorage.getItem('cc-admin-locale') as SupportedLocale
  if (savedLocale && messages[savedLocale]) {
    return savedLocale
  }

  // 2. 从浏览器语言检测
  const browserLang = navigator.language.toLowerCase()

  // 中文检测
  if (browserLang.includes('zh')) {
    if (browserLang.includes('tw') || browserLang.includes('hk') || browserLang.includes('hant')) {
      return 'zh-TW'
    }
    return 'zh-CN'
  }

  // 日文检测
  if (browserLang.includes('ja')) {
    return 'ja-JP'
  }

  // 英文检测
  if (browserLang.includes('en')) {
    return 'en-US'
  }

  // 3. 默认中文
  return 'zh-CN'
}

// 创建 i18n 实例
export const i18n = createI18n({
  legacy: false,
  locale: getDefaultLocale(),
  fallbackLocale: 'zh-CN',
  messages: messages as any,
  globalInjection: true,
  silentTranslationWarn: true,
  silentFallbackWarn: true,
  missingWarn: import.meta.env.DEV,
  fallbackWarn: import.meta.env.DEV,
})

// 安装插件
export function setupI18n(app: App) {
  app.use(i18n)
}

// 获取当前语言
export function getCurrentLocale(): SupportedLocale {
  return (i18n.global.locale as any).value
}

// 设置语言
export function setLocale(locale: SupportedLocale) {
  if (messages[locale]) {
    ;(i18n.global.locale as any).value = locale
    localStorage.setItem('cc-admin-locale', locale)

    // 更新HTML lang属性
    document.documentElement.lang = locale

    // 更新HTML dir属性
    const localeInfo = supportedLocales.find(item => item.key === locale)
    document.documentElement.dir = localeInfo?.direction || 'ltr'

    // 触发语言变更事件
    window.dispatchEvent(
      new CustomEvent('locale-changed', {
        detail: { locale },
      })
    )
  }
}

// 获取翻译文本
export function t(key: string, params?: Record<string, any>): string {
  return i18n.global.t(key, params || {})
}

// 格式化日期
export function d(date: Date | number, format?: string): string {
  return format ? i18n.global.d(date, format) : i18n.global.d(date)
}

// 格式化数字
export function n(number: number, format?: string): string {
  return format ? i18n.global.n(number, format) : i18n.global.n(number)
}

// 导出类型和工具函数
export { getDefaultLocale, messages }
export type { LocaleInfo, LocaleMessages, SupportedLocale }
```

### 语言切换 Hook

```typescript
// src/hooks/modules/useLocale.ts
import { computed } from 'vue'
import { useI18n } from 'vue-i18n'
import type { SupportedLocale } from '@/locales/types'
import { supportedLocales, setLocale, getCurrentLocale } from '@/locales'

export function useLocale() {
  const { locale, t, d, n } = useI18n()

  // 当前语言信息
  const currentLocale = computed(() => supportedLocales.find(item => item.key === locale.value))

  // 是否为中文
  const isChineseLang = computed(() => locale.value.startsWith('zh'))

  // 是否为RTL语言
  const isRTL = computed(() => currentLocale.value?.direction === 'rtl')

  // 切换语言
  const switchLocale = async (newLocale: SupportedLocale) => {
    if (locale.value === newLocale) return

    try {
      setLocale(newLocale)
    } catch (error) {
      console.error('Failed to switch locale:', error)
    }
  }

  // 获取翻译文本（带类型安全）
  const $t = (key: string, params?: Record<string, any>) => {
    return t(key, params)
  }

  // 格式化日期
  const $d = (date: Date | number, format?: string) => {
    return d(date, format)
  }

  // 格式化数字
  const $n = (number: number, format?: string) => {
    return n(number, format)
  }

  return {
    // 响应式数据
    locale: computed(() => getCurrentLocale()),
    currentLocale,
    isChineseLang,
    isRTL,
    supportedLocales,

    // 方法
    switchLocale,
    $t,
    $d,
    $n,
  }
}
```

### Pinia 语言状态管理

```typescript
// src/stores/modules/locale.ts
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { SupportedLocale, LocaleInfo } from '@/locales/types'
import { supportedLocales, setLocale, getCurrentLocale } from '@/locales'

export const useLocaleStore = defineStore('locale', () => {
  // 状态
  const currentLocale = ref<SupportedLocale>(getCurrentLocale())

  // 计算属性
  const localeInfo = computed(() => supportedLocales.find(item => item.key === currentLocale.value))

  const isChineseLang = computed(() => currentLocale.value.startsWith('zh'))

  // 操作
  const changeLocale = async (locale: SupportedLocale) => {
    if (currentLocale.value === locale) return

    try {
      setLocale(locale)
      currentLocale.value = locale
    } catch (error) {
      console.error('Failed to change locale:', error)
      throw error
    }
  }

  const toggleLocale = () => {
    const currentIndex = supportedLocales.findIndex(item => item.key === currentLocale.value)
    const nextIndex = (currentIndex + 1) % supportedLocales.length
    const nextLocale = supportedLocales[nextIndex].key
    changeLocale(nextLocale)
  }

  return {
    // 状态
    currentLocale,

    // 计算属性
    localeInfo,
    isChineseLang,
    supportedLocales,

    // 操作
    changeLocale,
    toggleLocale,
  }
})
```

## 🧩 组件中的国际化使用

### 基础使用

```vue
<!-- UserProfile.vue -->
<template>
  <div class="user-profile">
    <h1>{{ $t('user.profile.title') }}</h1>

    <!-- 基础文本翻译 -->
    <div class="profile-item">
      <label>{{ $t('user.profile.username') }}</label>
      <span>{{ user.username }}</span>
    </div>

    <!-- 带参数的翻译 -->
    <div class="profile-item">
      <label>{{ $t('user.profile.lastLogin') }}</label>
      <span>{{ $d(user.lastLoginTime, 'datetime') }}</span>
    </div>

    <!-- 复数形式 -->
    <div class="stats">
      {{ $t('user.management.userCount', { count: userCount }, userCount) }}
    </div>

    <!-- 状态翻译 -->
    <div class="status">
      <span :class="statusClass">
        {{ $t(`user.status.${user.status}`) }}
      </span>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import { useI18n } from 'vue-i18n'
import type { User } from '@/types/user'

interface Props {
  user: User
  userCount: number
}

const props = defineProps<Props>()
const { t: $t, d: $d } = useI18n()

// 计算状态样式
const statusClass = computed(() => ({
  'status-active': props.user.status === 'active',
  'status-inactive': props.user.status === 'inactive',
}))
</script>
```

### 语言切换组件

```vue
<!-- LanguageSwitch.vue -->
<template>
  <div class="language-switch">
    <button
      v-for="locale in supportedLocales"
      :key="locale.key"
      :class="['locale-btn', { active: currentLocale === locale.key }]"
      @click="switchLocale(locale.key)"
    >
      <span class="flag">{{ locale.flag }}</span>
      <span class="name">{{ locale.name }}</span>
    </button>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import { useLocale } from '@/hooks/modules/useLocale'

const { currentLocale, supportedLocales, switchLocale } = useLocale()
</script>

<style scoped>
.language-switch {
  display: flex;
  gap: 8px;
}

.locale-btn {
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 8px 12px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: transparent;
  cursor: pointer;
  transition: all 0.2s;
}

.locale-btn:hover {
  background: var(--hover-bg);
}

.locale-btn.active {
  background: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}

.flag {
  font-size: 16px;
}

.name {
  font-size: 14px;
}
</style>
```

### 路由标题国际化

```typescript
// src/router/utils/helper.ts
import { t } from '@/locales'

export function generateRouteTitle(routeTitle?: string): string {
  if (!routeTitle) return ''

  // 如果是翻译键，进行翻译
  if (routeTitle.includes('.')) {
    return t(routeTitle)
  }

  // 否则直接返回
  return routeTitle
}

// 在路由配置中使用
export const routes = [
  {
    path: '/dashboard',
    name: 'Dashboard',
    component: () => import('@/views/dashboard/index.vue'),
    meta: {
      title: 'router.dashboard.dashboard', // 使用翻译键
      requiresAuth: true,
    },
  },
  {
    path: '/user',
    name: 'User',
    component: () => import('@/views/user/index.vue'),
    meta: {
      title: 'user.management.title',
      requiresAuth: true,
    },
  },
]
```

## 🔧 i18n Ally 插件配置

### VSCode/Cursor 设置

```json
// .vscode/settings.json 或 .cursor/settings.json
{
  // i18n Ally 国际化插件配置
  "i18n-ally.localesPaths": ["src/locales/lang"],
  "i18n-ally.keystyle": "nested",
  "i18n-ally.sortKeys": true,
  "i18n-ally.namespace": false,
  "i18n-ally.pathMatcher": "{locale}.{ext}",
  "i18n-ally.enabledParsers": ["ts", "js"],
  "i18n-ally.sourceLanguage": "zh-CN",
  "i18n-ally.displayLanguage": "zh-CN",
  "i18n-ally.enabledFrameworks": ["vue", "vue-i18n"],
  "i18n-ally.extract.keyPrefix": "",
  "i18n-ally.extract.keyMaxLength": 100,
  "i18n-ally.extract.parsers.html.attributes": ["alt", "title", "placeholder"],
  "i18n-ally.extract.parsers.html.ignoredTags": ["script", "style"],
  "i18n-ally.review.enabled": true,
  "i18n-ally.review.gutters": true,
  "i18n-ally.dirStructure": "dir",
  "i18n-ally.annotationInPlace": true,
  "i18n-ally.annotationMaxLength": 50,
  "i18n-ally.editor.preferEditor": true,
  "i18n-ally.readonly": false,
  "i18n-ally.usage.scanningDirs": ["src"],
  "i18n-ally.usage.ignoredFiles": ["**/*.d.ts", "**/node_modules/**", "**/dist/**"]
}
```

### 专用配置文件

```typescript
// i18n-ally.config.ts
export default {
  // 语言文件位置
  localesPaths: ['src/locales/lang'],

  // 支持的语言
  sourceLanguage: 'zh-CN',
  displayLanguage: 'zh-CN',

  // 文件结构配置
  pathMatcher: '{locale}.{ext}',
  dirStructure: 'dir',
  namespace: false,

  // 解析器配置
  enabledParsers: ['ts', 'js'],
  enabledFrameworks: ['vue', 'vue-i18n'],

  // 键值配置
  keystyle: 'nested',
  sortKeys: true,

  // 提取配置
  extract: {
    keyPrefix: '',
    keyMaxLength: 100,
    parsers: {
      html: {
        attributes: ['alt', 'title', 'placeholder', 'aria-label'],
        ignoredTags: ['script', 'style'],
      },
      vue: {
        attributes: ['v-text', 'v-html'],
        directives: ['t', 'tc', 'te', 'd', 'n'],
      },
    },
  },

  // 重构模板
  refactor: {
    templates: [
      {
        name: 'vue-i18n-template',
        find: "\\$t\\('([^']*)'\\)",
        replace: "{{ \\$t('$1') }}",
      },
      {
        name: 'vue-i18n-script',
        find: "this\\.\\$t\\('([^']*)'\\)",
        replace: "t('$1')",
      },
    ],
  },

  // 审查配置
  review: {
    enabled: true,
    gutters: true,
  },

  // 编辑器配置
  editor: {
    preferEditor: true,
    annotationInPlace: true,
    annotationMaxLength: 50,
  },

  // 使用情况分析
  usage: {
    scanningDirs: ['src'],
    ignoredFiles: ['**/*.d.ts', '**/node_modules/**', '**/dist/**', '**/.git/**', '**/coverage/**'],
  },

  // 只读模式（设置为false以允许编辑）
  readonly: false,
}
```

## 🌟 最佳实践

### 翻译键命名规范

```typescript
// ✅ 正确：使用模块化的键名
$t('user.profile.title') // 用户.资料.标题
$t('auth.login.username') // 认证.登录.用户名
$t('common.actions.confirm') // 通用.操作.确认
$t('dashboard.statistics.totalUsers') // 仪表盘.统计.总用户数

// ❌ 错误：过于简单或混乱的键名
$t('title') // 不明确
$t('userProfilePageTitle') // 过于冗长
$t('user_profile_title') // 下划线格式不一致
```

### 参数化翻译

```typescript
// ✅ 正确：使用参数化翻译
const message = $t('user.management.deleteConfirm', {
  username: user.username,
})

// 语言文件中：
// zh-CN: "确定要删除用户 {username} 吗？"
// en-US: "Are you sure to delete user {username}?"

// ✅ 正确：复数形式处理
const userCount = $t('common.table.total', { total: count })

// 语言文件中：
// zh-CN: "共 {total} 条"
// en-US: "Total {total} items"
```

### 条件翻译

```vue
<template>
  <!-- ✅ 正确：根据状态显示不同文本 -->
  <span :class="`status-${user.status}`">
    {{ $t(`user.status.${user.status}`) }}
  </span>

  <!-- ✅ 正确：条件性显示翻译文本 -->
  <div v-if="hasError">
    {{ $t('common.status.error') }}
  </div>
  <div v-else>
    {{ $t('common.status.success') }}
  </div>
</template>
```

### 性能优化

```typescript
// ✅ 正确：缓存翻译结果
const { $t } = useLocale()
const cachedTranslations = computed(() => ({
  title: $t('user.profile.title'),
  username: $t('user.profile.username'),
  email: $t('user.profile.email'),
}))

// ✅ 正确：避免在循环中调用翻译
const statusOptions = computed(() => [
  { value: 'active', label: $t('user.status.active') },
  { value: 'inactive', label: $t('user.status.inactive') },
  { value: 'banned', label: $t('user.status.banned') },
])
```

### 类型安全

```typescript
// ✅ 正确：使用类型化的翻译键
type TranslationKey =
  | 'common.actions.confirm'
  | 'common.actions.cancel'
  | 'user.profile.title'
  | 'user.status.active'

const safeT = (key: TranslationKey, params?: Record<string, any>) => {
  return $t(key, params)
}

// 使用时会有类型提示和检查
const title = safeT('user.profile.title') // ✅ 正确
const invalid = safeT('invalid.key') // ❌ 类型错误
```

### 测试国际化

```typescript
// tests/i18n.test.ts
import { describe, it, expect } from 'vitest'
import { createI18n } from 'vue-i18n'
import { messages } from '@/locales'

describe('i18n', () => {
  it('should have all required translations', () => {
    const i18n = createI18n({
      legacy: false,
      locale: 'zh-CN',
      messages,
    })

    // 测试基本翻译
    expect(i18n.global.t('common.actions.confirm')).toBe('确认')
    expect(i18n.global.t('common.actions.cancel')).toBe('取消')
  })

  it('should handle parameters correctly', () => {
    const i18n = createI18n({
      legacy: false,
      locale: 'zh-CN',
      messages,
    })

    const result = i18n.global.t('common.table.total', { total: 100 })
    expect(result).toBe('共 100 条')
  })

  it('should fallback to default language', () => {
    const i18n = createI18n({
      legacy: false,
      locale: 'invalid-locale',
      fallbackLocale: 'zh-CN',
      messages,
    })

    expect(i18n.global.t('common.actions.confirm')).toBe('确认')
  })
})
```

遵循这些国际化规范，确保CC-Admin项目能够支持多语言，提供良好的国际化用户体验。所有翻译键都应该遵循模块化的命名规范，并且保持所有语言包的结构一致性。

```

```
