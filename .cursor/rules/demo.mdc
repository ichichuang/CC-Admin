# CC-Admin Vue3 组件 Demo 规范

## 📋 基本原则

- **简洁明了**: Demo 代码尽可能简洁，聚焦展示一个功能点
- **即用性**: 用户可以直接复制代码到项目中使用
- **完整性**: 包含必要的 import 语句和类型定义
- **可读性**: 代码结构清晰，注释适度
- **响应式**: 展示响应式设计和移动端适配
- **主题兼容**: 支持深色/浅色主题切换

## 📁 文件组织

### 目录结构

```
src/components/UserCard/
├── index.vue              # 组件主文件
├── types.ts               # 组件类型定义
├── demo/                  # 演示目录
│   ├── basic.vue          # 基础用法
│   ├── advanced.vue       # 高级用法
│   ├── custom-theme.vue   # 主题定制
│   ├── responsive.vue     # 响应式演示
│   └── with-loading.vue   # 加载状态
└── README.md              # 组件文档
```

### 文件命名规范

- **基础Demo**: `basic.vue` - 最简单的用法示例
- **功能Demo**: `kebab-case.vue` - 如 `custom-filter.vue`、`batch-operation.vue`
- **状态Demo**: `with-{state}.vue` - 如 `with-loading.vue`、`with-error.vue`
- **主题Demo**: `{theme}-theme.vue` - 如 `dark-theme.vue`、`custom-theme.vue`
- **响应式Demo**: `responsive.vue` - 响应式布局演示

## 🧩 Vue3 Demo 编写规范

### 基础Demo模板

```vue
<!-- UserCard/demo/basic.vue -->
<template>
  <div class="demo-container">
    <div class="demo-section">
      <h3 class="demo-title">基础用法</h3>
      <p class="demo-description">最简单的用法，展示用户基本信息。</p>

      <div class="demo-showcase">
        <UserCard
          :user="sampleUser"
          @user-click="handleUserClick"
        />
      </div>

      <div class="demo-code">
        <!-- 代码展示区域 -->
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import UserCard from '../index.vue'
import type { User } from '../types'

// ✅ 正确：提供有意义的示例数据
const sampleUser = ref<User>({
  id: '1',
  username: 'john_doe',
  email: 'john@example.com',
  avatar: 'https://example.com/avatar.jpg',
  role: 'admin',
  isActive: true,
  createdAt: new Date('2024-01-01'),
  lastLoginAt: new Date(),
})

// ✅ 正确：事件处理函数
const handleUserClick = (user: User) => {
  console.log('用户点击:', user.username)
}
</script>

<style scoped>
.demo-container {
  @apply p-6 bg-white dark:bg-gray-900;
}

.demo-section {
  @apply mb-8;
}

.demo-title {
  @apply text-lg font-semibold text-gray-900 dark:text-white mb-2;
}

.demo-description {
  @apply text-sm text-gray-600 dark:text-gray-400 mb-4;
}

.demo-showcase {
  @apply p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-800;
}
</style>
```

### 高级Demo示例

```vue
<!-- UserCard/demo/advanced.vue -->
<template>
  <div class="demo-container">
    <div class="demo-section">
      <h3 class="demo-title">高级用法</h3>
      <p class="demo-description">演示组件的高级功能：自定义插槽、事件处理、状态管理等。</p>

      <div class="demo-showcase">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <UserCard
            v-for="user in userList"
            :key="user.id"
            :user="user"
            :loading="isLoading"
            :selected="selectedUsers.has(user.id)"
            @user-click="handleUserClick"
            @status-change="handleStatusChange"
          >
            <!-- 自定义头部插槽 -->
            <template #header>
              <div class="flex justify-between items-center">
                <span class="text-xs text-gray-500"> ID: {{ user.id }} </span>
                <input
                  type="checkbox"
                  :checked="selectedUsers.has(user.id)"
                  @change="toggleUserSelection(user.id)"
                  class="rounded border-gray-300"
                />
              </div>
            </template>

            <!-- 自定义操作插槽 -->
            <template #actions>
              <div class="flex gap-2">
                <button
                  @click="editUser(user)"
                  class="btn-secondary btn-sm"
                >
                  编辑
                </button>
                <button
                  @click="deleteUser(user.id)"
                  class="btn-danger btn-sm"
                  :disabled="user.role === 'admin'"
                >
                  删除
                </button>
              </div>
            </template>
          </UserCard>
        </div>

        <!-- 批量操作 -->
        <div
          class="mt-4 flex gap-2"
          v-if="selectedUsers.size > 0"
        >
          <button
            @click="batchExport"
            class="btn-primary"
          >
            导出选中 ({{ selectedUsers.size }})
          </button>
          <button
            @click="batchDelete"
            class="btn-danger"
          >
            批量删除
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import { useUserStore } from '@/stores/user'
import UserCard from '../index.vue'
import type { User, UserStatus } from '../types'

// ✅ 正确：使用 Composable 和 Store
const userStore = useUserStore()
const isLoading = ref(false)
const selectedUsers = ref(new Set<string>())

// ✅ 正确：计算属性
const userList = computed(() => userStore.userList)

// ✅ 正确：事件处理函数
const handleUserClick = (user: User) => {
  console.log('点击用户:', user.username)
}

const handleStatusChange = async (userId: string, status: UserStatus) => {
  try {
    isLoading.value = true
    await userStore.updateUser(userId, { status })
  } catch (error) {
    console.error('状态更新失败:', error)
  } finally {
    isLoading.value = false
  }
}

const toggleUserSelection = (userId: string) => {
  if (selectedUsers.value.has(userId)) {
    selectedUsers.value.delete(userId)
  } else {
    selectedUsers.value.add(userId)
  }
}

const editUser = (user: User) => {
  // 编辑用户逻辑
  console.log('编辑用户:', user.username)
}

const deleteUser = async (userId: string) => {
  if (confirm('确定要删除这个用户吗？')) {
    await userStore.deleteUser(userId)
  }
}

const batchExport = () => {
  const selectedUserList = userList.value.filter(user => selectedUsers.value.has(user.id))
  console.log('导出用户:', selectedUserList)
}

const batchDelete = async () => {
  if (confirm(`确定要删除 ${selectedUsers.value.size} 个用户吗？`)) {
    const deletePromises = Array.from(selectedUsers.value).map(userId =>
      userStore.deleteUser(userId)
    )
    await Promise.all(deletePromises)
    selectedUsers.value.clear()
  }
}

// ✅ 正确：初始化数据
const initializeDemoData = () => {
  if (userList.value.length === 0) {
    // 模拟数据
    userStore.setUserList([
      {
        id: '1',
        username: 'alice_admin',
        email: 'alice@example.com',
        role: 'admin',
        isActive: true,
        createdAt: new Date('2024-01-01'),
        lastLoginAt: new Date(),
      },
      {
        id: '2',
        username: 'bob_user',
        email: 'bob@example.com',
        role: 'user',
        isActive: false,
        createdAt: new Date('2024-01-15'),
        lastLoginAt: new Date('2024-01-20'),
      },
      // ... 更多示例数据
    ])
  }
}

initializeDemoData()
</script>
```

### 响应式Demo

```vue
<!-- UserCard/demo/responsive.vue -->
<template>
  <div class="demo-container">
    <div class="demo-section">
      <h3 class="demo-title">响应式布局</h3>
      <p class="demo-description">演示组件在不同屏幕尺寸下的表现，包括移动端优化。</p>

      <!-- 视口尺寸指示器 -->
      <div class="viewport-indicator">
        <span class="text-sm text-gray-600 dark:text-gray-400">
          当前视口: {{ currentBreakpoint }}
        </span>
      </div>

      <div class="demo-showcase">
        <!-- 响应式网格布局 -->
        <div class="responsive-grid">
          <UserCard
            v-for="user in sampleUsers"
            :key="user.id"
            :user="user"
            :compact="isMobile"
            class="responsive-card"
          />
        </div>
      </div>

      <!-- 移动端特殊处理 -->
      <div
        class="mobile-demo"
        v-if="isMobile"
      >
        <h4 class="text-md font-medium mb-2">移动端优化</h4>
        <UserCard
          :user="sampleUsers[0]"
          mobile-optimized
          show-full-info
        />
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, onUnmounted } from 'vue'
import { useBreakpoints, breakpointsTailwind } from '@vueuse/core'
import UserCard from '../index.vue'
import type { User } from '../types'

// ✅ 正确：使用响应式工具
const breakpoints = useBreakpoints(breakpointsTailwind)
const isMobile = breakpoints.smaller('md')
const isTablet = breakpoints.between('md', 'lg')
const isDesktop = breakpoints.greater('lg')

const currentBreakpoint = computed(() => {
  if (isMobile.value) return 'Mobile (< 768px)'
  if (isTablet.value) return 'Tablet (768px - 1024px)'
  if (isDesktop.value) return 'Desktop (> 1024px)'
  return 'Unknown'
})

// ✅ 正确：示例数据
const sampleUsers = ref<User[]>([
  {
    id: '1',
    username: 'mobile_user',
    email: 'mobile@example.com',
    avatar: 'https://example.com/mobile-avatar.jpg',
    role: 'user',
    isActive: true,
    createdAt: new Date(),
    lastLoginAt: new Date(),
  },
  {
    id: '2',
    username: 'tablet_user',
    email: 'tablet@example.com',
    role: 'admin',
    isActive: true,
    createdAt: new Date(),
    lastLoginAt: new Date(),
  },
  {
    id: '3',
    username: 'desktop_user',
    email: 'desktop@example.com',
    role: 'moderator',
    isActive: false,
    createdAt: new Date(),
    lastLoginAt: new Date(),
  },
])
</script>

<style scoped>
.responsive-grid {
  @apply grid gap-4
    grid-cols-1
    sm:grid-cols-2
    lg:grid-cols-3
    xl:grid-cols-4;
}

.responsive-card {
  @apply transition-all duration-300
    hover:scale-105 hover:shadow-lg;
}

.viewport-indicator {
  @apply mb-4 p-2
    bg-blue-50 dark:bg-blue-900/20
    border border-blue-200 dark:border-blue-700
    rounded-lg;
}

.mobile-demo {
  @apply mt-6 p-4
    bg-purple-50 dark:bg-purple-900/20
    border border-purple-200 dark:border-purple-700
    rounded-lg;
}

/* 移动端特殊样式 */
@media (max-width: 767px) {
  .demo-showcase {
    @apply px-2;
  }

  .responsive-card {
    @apply transform-none hover:transform-none hover:shadow-none;
  }
}
</style>
```

### 主题定制Demo

```vue
<!-- UserCard/demo/custom-theme.vue -->
<template>
  <div class="demo-container">
    <div class="demo-section">
      <h3 class="demo-title">主题定制</h3>
      <p class="demo-description">演示组件在不同主题下的表现，以及如何自定义主题样式。</p>

      <!-- 主题切换器 -->
      <div class="theme-controls">
        <div class="control-group">
          <label class="control-label">主题模式:</label>
          <div class="control-options">
            <button
              v-for="mode in ['light', 'dark', 'auto']"
              :key="mode"
              @click="switchThemeMode(mode)"
              :class="['theme-btn', { active: currentThemeMode === mode }]"
            >
              {{ themeModeLabels[mode] }}
            </button>
          </div>
        </div>

        <div class="control-group">
          <label class="control-label">主题色:</label>
          <div class="control-options">
            <button
              v-for="color in themeColors"
              :key="color.key"
              @click="switchThemeColor(color.key)"
              :class="['color-btn', { active: currentThemeColor === color.key }]"
              :style="{ backgroundColor: color.value }"
            >
              {{ color.name }}
            </button>
          </div>
        </div>
      </div>

      <div class="demo-showcase">
        <!-- 不同主题下的组件展示 -->
        <div class="theme-showcase">
          <div class="theme-section">
            <h4 class="text-sm font-medium mb-2">默认主题</h4>
            <UserCard :user="sampleUser" />
          </div>

          <div class="theme-section">
            <h4 class="text-sm font-medium mb-2">自定义主题</h4>
            <UserCard
              :user="sampleUser"
              :theme-colors="customThemeColors"
              custom-theme
            />
          </div>

          <div class="theme-section">
            <h4 class="text-sm font-medium mb-2">品牌主题</h4>
            <UserCard
              :user="sampleUser"
              brand-theme
              :brand-colors="{
                primary: '#ff6b35',
                secondary: '#004e89',
                accent: '#ffc857',
              }"
            />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import { useColorStore } from '@/stores/color'
import { useTheme } from '@/hooks/useTheme'
import UserCard from '../index.vue'
import type { User } from '../types'

// ✅ 正确：使用主题相关的 Composables
const colorStore = useColorStore()
const { switchMode, switchColor } = useTheme()

const currentThemeMode = computed(() => colorStore.mode)
const currentThemeColor = computed(() => colorStore.primaryColor)

// ✅ 正确：主题配置
const themeModeLabels = {
  light: '浅色',
  dark: '深色',
  auto: '自动',
}

const themeColors = [
  { key: 'blue', name: '蓝色', value: '#3b82f6' },
  { key: 'green', name: '绿色', value: '#10b981' },
  { key: 'purple', name: '紫色', value: '#8b5cf6' },
  { key: 'orange', name: '橙色', value: '#f59e0b' },
  { key: 'red', name: '红色', value: '#ef4444' },
]

const customThemeColors = {
  primary: '#6366f1',
  primaryHover: '#4f46e5',
  secondary: '#64748b',
  success: '#22c55e',
  warning: '#f59e0b',
  error: '#ef4444',
  background: '#ffffff',
  surface: '#f8fafc',
  text: '#1e293b',
  textSecondary: '#64748b',
}

// ✅ 正确：示例数据
const sampleUser = ref<User>({
  id: '1',
  username: 'theme_demo',
  email: 'theme@example.com',
  avatar: 'https://example.com/theme-avatar.jpg',
  role: 'admin',
  isActive: true,
  createdAt: new Date(),
  lastLoginAt: new Date(),
})

// ✅ 正确：主题切换方法
const switchThemeMode = (mode: 'light' | 'dark' | 'auto') => {
  switchMode(mode)
}

const switchThemeColor = (color: string) => {
  switchColor(color)
}
</script>

<style scoped>
.theme-controls {
  @apply mb-6 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg space-y-4;
}

.control-group {
  @apply flex flex-col sm:flex-row sm:items-center gap-2;
}

.control-label {
  @apply text-sm font-medium text-gray-700 dark:text-gray-300 min-w-20;
}

.control-options {
  @apply flex flex-wrap gap-2;
}

.theme-btn {
  @apply px-3 py-1 text-sm rounded-md border border-gray-300 dark:border-gray-600
    bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300
    hover:bg-gray-50 dark:hover:bg-gray-600
    transition-colors;
}

.theme-btn.active {
  @apply bg-primary text-white border-primary
    hover:bg-primary/90;
}

.color-btn {
  @apply px-3 py-1 text-sm rounded-md border-2 border-transparent
    text-white font-medium
    hover:opacity-80 transition-all;
}

.color-btn.active {
  @apply border-gray-900 dark:border-white scale-110;
}

.theme-showcase {
  @apply grid grid-cols-1 md:grid-cols-3 gap-6;
}

.theme-section {
  @apply space-y-2;
}
</style>
```

## 📱 移动端和可访问性Demo

### 无障碍访问Demo

```vue
<!-- UserCard/demo/accessibility.vue -->
<template>
  <div class="demo-container">
    <div class="demo-section">
      <h3 class="demo-title">无障碍访问</h3>
      <p class="demo-description">
        演示组件的无障碍功能：键盘导航、屏幕阅读器支持、高对比度模式等。
      </p>

      <!-- 无障碍功能说明 -->
      <div class="accessibility-info">
        <ul class="feature-list">
          <li>✅ 支持键盘导航 (Tab, Enter, Space)</li>
          <li>✅ 屏幕阅读器友好的 ARIA 标签</li>
          <li>✅ 高对比度模式支持</li>
          <li>✅ 焦点状态清晰可见</li>
          <li>✅ 文字大小可缩放</li>
        </ul>
      </div>

      <div class="demo-showcase">
        <!-- 键盘导航演示 -->
        <div class="keyboard-demo">
          <h4 class="demo-subtitle">键盘导航演示</h4>
          <p class="demo-tip">使用 Tab 键在卡片间导航，Enter 或 Space 键激活</p>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <UserCard
              v-for="(user, index) in sampleUsers"
              :key="user.id"
              :user="user"
              :tabindex="0"
              :aria-label="`用户卡片: ${user.username}, 角色: ${user.role}`"
              @keydown.enter="handleKeyboardActivate(user)"
              @keydown.space.prevent="handleKeyboardActivate(user)"
              @focus="handleFocus(index)"
              @blur="handleBlur(index)"
              keyboard-accessible
            />
          </div>
        </div>

        <!-- 高对比度模式 -->
        <div class="contrast-demo">
          <h4 class="demo-subtitle">高对比度模式</h4>
          <div class="contrast-controls">
            <button
              @click="toggleHighContrast"
              :class="['contrast-btn', { active: isHighContrast }]"
            >
              {{ isHighContrast ? '关闭' : '开启' }}高对比度
            </button>
          </div>
          <div :class="{ 'high-contrast': isHighContrast }">
            <UserCard
              :user="sampleUsers[0]"
              high-contrast
            />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import UserCard from '../index.vue'
import type { User } from '../types'

const isHighContrast = ref(false)
const focusedIndex = ref(-1)

// ✅ 正确：无障碍示例数据
const sampleUsers = ref<User[]>([
  {
    id: '1',
    username: 'accessible_user_1',
    email: 'user1@example.com',
    role: 'admin',
    isActive: true,
    createdAt: new Date(),
    lastLoginAt: new Date(),
  },
  {
    id: '2',
    username: 'accessible_user_2',
    email: 'user2@example.com',
    role: 'user',
    isActive: false,
    createdAt: new Date(),
    lastLoginAt: new Date(),
  },
])

// ✅ 正确：键盘交互处理
const handleKeyboardActivate = (user: User) => {
  console.log('键盘激活用户:', user.username)
  // 触发用户点击事件
}

const handleFocus = (index: number) => {
  focusedIndex.value = index
  console.log('焦点移动到用户:', sampleUsers.value[index].username)
}

const handleBlur = (index: number) => {
  if (focusedIndex.value === index) {
    focusedIndex.value = -1
  }
}

const toggleHighContrast = () => {
  isHighContrast.value = !isHighContrast.value
  // 可以在这里添加全局高对比度模式的切换逻辑
}
</script>

<style scoped>
.accessibility-info {
  @apply mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg;
}

.feature-list {
  @apply space-y-1 text-sm text-blue-800 dark:text-blue-200;
}

.keyboard-demo,
.contrast-demo {
  @apply mb-8;
}

.demo-subtitle {
  @apply text-md font-medium text-gray-900 dark:text-white mb-2;
}

.demo-tip {
  @apply text-sm text-gray-600 dark:text-gray-400 mb-4 italic;
}

.contrast-controls {
  @apply mb-4;
}

.contrast-btn {
  @apply px-4 py-2 text-sm font-medium rounded-md border
    bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600
    text-gray-700 dark:text-gray-300
    hover:bg-gray-50 dark:hover:bg-gray-600
    focus:outline-none focus:ring-2 focus:ring-blue-500
    transition-all;
}

.contrast-btn.active {
  @apply bg-yellow-400 text-black border-yellow-500;
}

/* 高对比度模式样式 */
.high-contrast {
  @apply bg-black text-white
    [&_*]:border-white
    [&_button]:bg-white [&_button]:text-black
    [&_button:hover]:bg-gray-200;
}

/* 键盘导航焦点样式 */
:deep(.user-card:focus) {
  @apply outline-none ring-2 ring-blue-500 ring-offset-2 ring-offset-white
    dark:ring-offset-gray-900;
}
</style>
```

## 🔧 Demo 最佳实践

### 代码质量要求

```vue
<script setup lang="ts">
// ✅ 正确：完整的 imports
import { ref, computed, watch, nextTick } from 'vue'
import { useRouter } from 'vue-router'
import { useI18n } from 'vue-i18n'
import UserCard from '../index.vue'
import type { User, UserRole, UserStatus } from '../types'

// ✅ 正确：类型安全的响应式数据
const users = ref<User[]>([])
const isLoading = ref(false)
const error = ref<Error | null>(null)

// ✅ 正确：有意义的计算属性
const activeUsers = computed(() => users.value.filter(user => user.isActive))

const usersByRole = computed(() =>
  users.value.reduce(
    (acc, user) => {
      if (!acc[user.role]) acc[user.role] = []
      acc[user.role].push(user)
      return acc
    },
    {} as Record<UserRole, User[]>
  )
)

// ✅ 正确：错误处理
const handleAsyncOperation = async () => {
  try {
    isLoading.value = true
    error.value = null
    // 异步操作
  } catch (err) {
    error.value = err instanceof Error ? err : new Error('操作失败')
    console.error('Demo 错误:', error.value.message)
  } finally {
    isLoading.value = false
  }
}

// ✅ 正确：清理副作用
onUnmounted(() => {
  // 清理定时器、监听器等
})
</script>
```

### 性能优化Demo

```vue
<!-- UserCard/demo/performance.vue -->
<template>
  <div class="demo-container">
    <div class="demo-section">
      <h3 class="demo-title">性能优化</h3>
      <p class="demo-description">演示大量数据渲染时的性能优化策略：虚拟滚动、懒加载、缓存等。</p>

      <div class="performance-controls">
        <div class="control-item">
          <label>数据量:</label>
          <select
            v-model="dataSize"
            @change="generateUsers"
          >
            <option value="100">100 条</option>
            <option value="1000">1,000 条</option>
            <option value="10000">10,000 条</option>
          </select>
        </div>

        <div class="control-item">
          <label>渲染模式:</label>
          <select v-model="renderMode">
            <option value="normal">普通渲染</option>
            <option value="virtual">虚拟滚动</option>
            <option value="lazy">懒加载</option>
          </select>
        </div>

        <button
          @click="measurePerformance"
          class="btn-primary"
        >
          测试性能
        </button>
      </div>

      <div
        class="performance-stats"
        v-if="performanceStats"
      >
        <div class="stat-item">
          <span class="stat-label">渲染时间:</span>
          <span class="stat-value">{{ performanceStats.renderTime }}ms</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">内存使用:</span>
          <span class="stat-value">{{ performanceStats.memoryUsage }}MB</span>
        </div>
      </div>

      <div class="demo-showcase">
        <!-- 虚拟滚动渲染 -->
        <VirtualList
          v-if="renderMode === 'virtual'"
          :items="users"
          :item-height="120"
          height="400px"
        >
          <template #default="{ item }">
            <UserCard
              :user="item"
              :key="item.id"
            />
          </template>
        </VirtualList>

        <!-- 懒加载渲染 -->
        <LazyRender
          v-else-if="renderMode === 'lazy'"
          :items="users"
          :page-size="20"
        >
          <template #default="{ items }">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <UserCard
                v-for="user in items"
                :key="user.id"
                :user="user"
              />
            </div>
          </template>
        </LazyRender>

        <!-- 普通渲染 -->
        <div
          v-else
          class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
        >
          <UserCard
            v-for="user in displayUsers"
            :key="user.id"
            :user="user"
          />
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, nextTick } from 'vue'
import UserCard from '../index.vue'
import VirtualList from '@/components/VirtualList.vue'
import LazyRender from '@/components/LazyRender.vue'
import type { User } from '../types'

const dataSize = ref(100)
const renderMode = ref<'normal' | 'virtual' | 'lazy'>('normal')
const users = ref<User[]>([])
const performanceStats = ref<{
  renderTime: number
  memoryUsage: number
} | null>(null)

// ✅ 正确：性能优化的计算属性
const displayUsers = computed(() => {
  // 普通模式下限制显示数量
  return renderMode.value === 'normal' ? users.value.slice(0, 50) : users.value
})

// ✅ 正确：生成测试数据
const generateUsers = () => {
  const count = parseInt(dataSize.value.toString())
  users.value = Array.from({ length: count }, (_, index) => ({
    id: `user-${index}`,
    username: `user_${index}`,
    email: `user${index}@example.com`,
    role: ['admin', 'user', 'moderator'][index % 3] as UserRole,
    isActive: Math.random() > 0.3,
    createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000),
    lastLoginAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),
  }))
}

// ✅ 正确：性能测量
const measurePerformance = async () => {
  const startTime = performance.now()
  const startMemory = (performance as any).memory?.usedJSHeapSize || 0

  // 触发重新渲染
  await nextTick()

  const endTime = performance.now()
  const endMemory = (performance as any).memory?.usedJSHeapSize || 0

  performanceStats.value = {
    renderTime: Math.round(endTime - startTime),
    memoryUsage: Math.round((endMemory - startMemory) / 1024 / 1024),
  }
}

// 初始化数据
generateUsers()
</script>
```

## 📚 文档集成

### README.md 模板

````markdown
# UserCard 用户卡片组件

## 概述

UserCard 是一个用于显示用户信息的卡片组件，支持多种布局和交互模式。

## 功能特性

- 📱 响应式设计，移动端友好
- 🎨 支持主题定制和深色模式
- ♿ 完整的无障碍访问支持
- 🔧 丰富的插槽和配置选项
- ⚡ 性能优化，支持大量数据

## 基础用法

```vue
<template>
  <UserCard
    :user="user"
    @user-click="handleClick"
  />
</template>

<script setup>
import UserCard from '@/components/UserCard'

const user = {
  id: '1',
  username: 'john_doe',
  email: 'john@example.com',
  role: 'admin',
}

const handleClick = user => {
  console.log('用户点击:', user)
}
</script>
```
````

## 在线演示

- [基础用法](./demo/basic.vue)
- [高级功能](./demo/advanced.vue)
- [响应式布局](./demo/responsive.vue)
- [主题定制](./demo/custom-theme.vue)
- [无障碍访问](./demo/accessibility.vue)
- [性能优化](./demo/performance.vue)

## API 文档

### Props

| 属性    | 类型    | 默认值 | 说明         |
| ------- | ------- | ------ | ------------ |
| user    | User    | -      | 用户信息对象 |
| loading | boolean | false  | 加载状态     |
| compact | boolean | false  | 紧凑模式     |

### Events

| 事件          | 参数                                 | 说明         |
| ------------- | ------------------------------------ | ------------ |
| user-click    | (user: User)                         | 用户点击事件 |
| status-change | (userId: string, status: UserStatus) | 状态变更事件 |

### Slots

| 插槽    | 参数 | 说明           |
| ------- | ---- | -------------- |
| header  | user | 自定义头部内容 |
| actions | user | 自定义操作按钮 |
| footer  | user | 自定义底部内容 |

```

遵循这些Demo规范，确保CC-Admin项目的组件演示代码质量高、功能完整、易于理解和使用。


- 确保代码运行正常，无控制台错误
- 适配常见浏览器
- 避免过时 API，及时更新到新推荐用法
```
